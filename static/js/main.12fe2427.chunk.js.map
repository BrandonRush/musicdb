{"version":3,"sources":["hooks/useApi.js","Album.js","Search.js","App.js","serviceWorker.js","index.js"],"names":["apiReducer","state","action","type","Object","objectSpread","isLoading","isError","data","payload","console","log","Error","useApi","initialResource","arguments","length","undefined","initialData","dataType","_useState","useState","_useState2","slicedToArray","resource","setResource","_useReducer","useReducer","_useReducer2","dispatch","useEffect","controller","AbortController","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","response","wrap","_context","prev","next","fetch","signal","sent","t0","json","abrupt","text","blob","t1","name","stop","apply","this","loadData","abort","useEntity","initialEntity","_useState3","_useState4","entity","setEntity","_useApi3","_useApi4","api_url","params","URLSearchParams","append","concat","id","loadEntity","cover_api_url","Album","album","_useApi","_useApi2","cover","setCover","_useEntity","_useEntity2","release","setRelease","releaseDate","dayjs","format","artist","genres","releaseCandidate","releases","find","country","status","document","body","style","backgroundImage","images","image","react_default","createElement","Fragment","Helmet_default","title","className","alt","src","map","genre","toUpperCase","join","millisToMinutesAndSeconds","media","tracks","reduce","album_time","track","index","millis","minutes","Math","floor","seconds","toFixed","languages","year","getSuggestions","value","inputValue","trim","toLowerCase","inputLength","filter","lang","slice","getSuggestionValue","suggestion","renderSuggestion","Search","setValue","suggestions","setSuggestions","inputProps","placeholder","onChange","event","newValue","dist_default","onSuggestionsFetchRequested","_ref2","onSuggestionsClearRequested","Boolean","window","location","hostname","match","ReactDOM","render","color","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.12fe2427.chunk.js","sourcesContent":["import { useState, useEffect, useReducer } from 'react';\r\n\r\nconst apiReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case 'FETCH_INIT':\r\n      return {\r\n        ...state,\r\n        isLoading: true,\r\n        isError: false\r\n      };\r\n    case 'FETCH_FAIL':\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        isError: true\r\n      };\r\n    case 'FETCH_SUCCESS':\r\n      return {\r\n        ...state,\r\n        data: action.payload,\r\n        isLoading: false,\r\n        isError: false\r\n      };\r\n    default:\r\n      console.log(state, action);\r\n      throw new Error();\r\n  }\r\n};\r\n\r\nconst useApi = (\r\n  initialResource = null,\r\n  initialData = null,\r\n  dataType = 'json'\r\n) => {\r\n  const [resource, setResource] = useState(initialResource);\r\n  const [state, dispatch] = useReducer(apiReducer, {\r\n    data: initialData,\r\n    isLoading: true,\r\n    isError: false\r\n  });\r\n\r\n  useEffect(() => {\r\n    let controller = new AbortController();\r\n\r\n    const loadData = async () => {\r\n      dispatch({ type: 'FETCH_INIT' });\r\n\r\n      try {\r\n        const response = await fetch(resource, {\r\n          signal: controller.signal\r\n        });\r\n\r\n        let data;\r\n        switch (dataType) {\r\n          case 'json':\r\n            data = await response.json();\r\n            break;\r\n          case 'text':\r\n            data = await response.text();\r\n            break;\r\n          case 'blob':\r\n            data = await response.blob();\r\n            break;\r\n          default:\r\n            console.log('default triggered');\r\n            data = await response.json();\r\n            break;\r\n        }\r\n\r\n        console.log('useApi: got response');\r\n        dispatch({ type: 'FETCH_SUCCESS', payload: data });\r\n      } catch (error) {\r\n        dispatch({ type: 'FETCH_FAIL' });\r\n        if (error.name === 'AbortError') {\r\n          console.log(error);\r\n          console.log('useApi: caught abort');\r\n        } else {\r\n          console.log(error);\r\n          throw error;\r\n        }\r\n      }\r\n    };\r\n    resource && loadData(); // Only run when url is set.\r\n\r\n    return () => {\r\n      console.log('useApi: unmounting');\r\n      controller.abort();\r\n    };\r\n  }, [dataType, resource]);\r\n\r\n  return [state, setResource];\r\n};\r\n\r\nconst useSearch = (type, query) => {\r\n  const [entity, setEntity] = useApi();\r\n};\r\n\r\nexport const useEntity = (initialEntity = null) => {\r\n  const [entity, setEntity] = useState(initialEntity);\r\n  const [resource, setResource] = useApi();\r\n\r\n  const api_url = 'https://musicbrainz.org/ws/2/';\r\n  const cover_api_url = 'https://coverartarchive.org/release-group/';\r\n\r\n  useEffect(() => {\r\n    const params = new URLSearchParams();\r\n    params.append('fmt', 'json');\r\n\r\n    const loadEntity = () => {\r\n      switch (entity.type) {\r\n        case 'album':\r\n          params.append('inc', 'artists+releases+genres');\r\n          setResource(api_url + `release-group/${entity.id}?` + params);\r\n          break;\r\n        case 'artist':\r\n          setResource(api_url + `artist/${entity.id}?` + params);\r\n          break;\r\n        case 'release':\r\n          params.append(\r\n            'inc',\r\n            'collections+labels+recordings+url-rels+genres+artist-rels+mediums'\r\n          );\r\n          setResource(api_url + `release/${entity.id}?` + params);\r\n          break;\r\n        case 'cover':\r\n          setResource(cover_api_url + entity.id);\r\n          break;\r\n        default:\r\n          console.log('useEntity: Errored!', entity);\r\n          throw new Error();\r\n      }\r\n    };\r\n    entity && loadEntity() && console.log('CALLED LOADENTITY');\r\n  }, [entity, setResource]);\r\n\r\n  return [resource, setResource, setEntity];\r\n};\r\n\r\nexport default useApi;\r\n","import React, { useEffect } from 'react';\r\nimport useApi, { useEntity } from './hooks/useApi';\r\nimport Helmet from 'react-helmet';\r\nimport dayjs from 'dayjs';\r\n\r\nconst api_url = 'https://musicbrainz.org/ws/2/';\r\nconst cover_api_url = 'https://coverartarchive.org/release-group/';\r\nconst wiki_api_url = (id) =>\r\n  `https://musicbrainz.org/release-group/${id}/wikipedia-extract`;\r\n\r\nexport default function Album({ album }) {\r\n  const [cover, setCover] = useApi();\r\n  const [release, setRelease, setEntity] = useEntity();\r\n\r\n  const releaseDate = dayjs(album['first-release-date']).format(\r\n    'MMMM DD, YYYY'\r\n  );\r\n  const artists = album['artist-credit'];\r\n  const artist = artists[0];\r\n  const genres = album.genres;\r\n  const releaseCandidate =\r\n    album.releases.find(\r\n      (release) => release.country === 'US' && release.status === 'Official'\r\n    ).id || album.releases.find((release) => release.status === 'Official').id;\r\n\r\n  useEffect(() => {\r\n    setCover(cover_api_url + album.id);\r\n    setEntity({ type: 'release', id: releaseCandidate });\r\n    if (!cover.isLoading && !cover.isError) {\r\n      document.body.style.backgroundImage =\r\n        'url(' + cover.data.images[0].image + ')';\r\n    }\r\n  }, [\r\n    album.id,\r\n    album.releases,\r\n    cover,\r\n    release,\r\n    releaseCandidate,\r\n    setCover,\r\n    setEntity,\r\n    setRelease\r\n  ]);\r\n  console.log(release);\r\n  console.log('album', album);\r\n\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <title>\r\n          {artist.name} - {album.title}\r\n        </title>\r\n        {/* <link\r\n          rel=\"icon\"\r\n          type=\"image/png\"\r\n          href={cover.data.images[0].image}\r\n          sizes=\"16x16\"\r\n        /> */}\r\n      </Helmet>\r\n      <div className=\"row cardcont nopadding\">\r\n        <div className=\"poster-container nopadding col-md-5\">\r\n          {!cover.isError && !cover.isLoading && (\r\n            <img\r\n              id=\"postertest\"\r\n              alt=\"covert art\"\r\n              className=\"poster\"\r\n              src={cover.data.images[0].image}\r\n            />\r\n          )}\r\n        </div>\r\n        <div className=\"meta-data-container col-md-7\">\r\n          <h1 id=\"title\">{album.title}</h1>\r\n          <span className=\"tagline\">{artist.name}</span>\r\n          <p>{releaseDate}</p>\r\n          <div className=\"additional-details\">\r\n            <span className=\"genre-list\">\r\n              {genres.map((genre) => genre.name.toUpperCase()).join(', ')}\r\n            </span>\r\n            <span className=\"production-list\">{album['primary-type']}</span>\r\n            <div className=\"row nopadding release-details mb-2\">\r\n              <div className=\"col\">\r\n                Original Release:\r\n                <span className=\"meta-data\">{releaseDate}</span>\r\n              </div>\r\n              <div className=\"col\">\r\n                Running Time:\r\n                <span className=\"meta-data\">\r\n                  {!release.isLoading &&\r\n                    millisToMinutesAndSeconds(\r\n                      release.data.media[0].tracks.reduce(\r\n                        (album_time, track) => (album_time += track.length),\r\n                        0\r\n                      )\r\n                    )}{' '}\r\n                  mins\r\n                </span>\r\n              </div>\r\n            </div>\r\n            <div className=\"row nopadding release-details\">\r\n              <div className=\"col\">\r\n                Box Office: <span className=\"meta-data\">{album.title}</span>\r\n              </div>\r\n              <div className=\"col\">\r\n                Vote Average: <span className=\"meta-data\">{album.title}</span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"row cardcont\">\r\n        <div className=\"meta-data-container col\">\r\n          {!release.isLoading &&\r\n            release.data.media[0].tracks.map((track, index) => {\r\n              return (\r\n                <div className=\"row justify-content-between mb-3 align-items-baseline\">\r\n                  <span className=\"meta-data col-lg-8\">\r\n                    {index + 1 + '. ' + track.title}\r\n                  </span>\r\n                  <span className=\"col-lg-4 text-right\">\r\n                    {millisToMinutesAndSeconds(track.length)}\r\n                  </span>\r\n                </div>\r\n              );\r\n            })}\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nfunction millisToMinutesAndSeconds(millis) {\r\n  var minutes = Math.floor(millis / 60000);\r\n  var seconds = ((millis % 60000) / 1000).toFixed(0);\r\n  return minutes + ':' + (seconds < 10 ? '0' : '') + seconds;\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport Autosuggest from 'react-autosuggest';\r\n\r\nconst languages = [\r\n  {\r\n    name: 'C',\r\n    year: 1972\r\n  },\r\n  {\r\n    name: 'Elm',\r\n    year: 2012\r\n  }\r\n];\r\n\r\n// Teach Autosuggest how to calculate suggestions for any given input value.\r\nconst getSuggestions = (value) => {\r\n  const inputValue = value.trim().toLowerCase();\r\n  const inputLength = inputValue.length;\r\n\r\n  return inputLength === 0\r\n    ? []\r\n    : languages.filter(\r\n        (lang) => lang.name.toLowerCase().slice(0, inputLength) === inputValue\r\n      );\r\n};\r\n\r\n// When suggestion is clicked, Autosuggest needs to populate the input\r\n// based on the clicked suggestion. Teach Autosuggest how to calculate the\r\n// input value for every given suggestion.\r\nconst getSuggestionValue = (suggestion) => suggestion.name;\r\n\r\n// Use your imagination to render suggestions.\r\nconst renderSuggestion = (suggestion) => <div>{suggestion.name}</div>;\r\n\r\nexport default function Search() {\r\n  const [value, setValue] = useState('');\r\n  const [suggestions, setSuggestions] = useState([]);\r\n\r\n  const onChange = (event, { newValue }) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n  // Autosuggest will call this function every time you need to update suggestions.\r\n  // You already implemented this logic above, so just use it.\r\n  const onSuggestionsFetchRequested = ({ value }) => {\r\n    setSuggestions(getSuggestions(value));\r\n  };\r\n\r\n  // Autosuggest will call this function every time you need to clear suggestions.\r\n  const onSuggestionsClearRequested = () => {\r\n    setSuggestions([]);\r\n  };\r\n\r\n  const inputProps = {\r\n    placeholder: 'Search for music...',\r\n    value,\r\n    onChange: onChange\r\n  };\r\n\r\n  return (\r\n    <div className=\"col-xs-12 search-container nopadding \">\r\n      <div className=\"row align-items-baseline\">\r\n        <div className=\"col-xs-12 col-sm-6 col-lg-5\">\r\n          <a\r\n            // href=\"./\"\r\n            title=\"ReactJS MusicBrainz Music Search\"\r\n            // onclick=\"ga('send', 'event', 'link', 'internal', 'TMDB logo')\"\r\n          >\r\n            <span className=\"logo\">musicdb</span>\r\n            {/* <img src={musicdblogo} className=\"logo\" alt=\"Musicdb\" /> */}\r\n          </a>\r\n        </div>\r\n        <div className=\"col-xs-12 col-sm-6 col-lg-7\">\r\n          {/* <form className=\"searchbox\">\r\n            <input\r\n              // ref=\"search suggestion\"\r\n              // onClick={this.handleChange}\r\n              className=\"searchbox__input typeahead form-control\"\r\n              type=\"text\"\r\n              placeholder=\"Search for music\"\r\n              id=\"q\"\r\n            />\r\n          </form> */}\r\n          <Autosuggest\r\n            className=\"searchbox__input typeahead form-control\"\r\n            suggestions={suggestions}\r\n            onSuggestionsFetchRequested={onSuggestionsFetchRequested}\r\n            onSuggestionsClearRequested={onSuggestionsClearRequested}\r\n            getSuggestionValue={getSuggestionValue}\r\n            renderSuggestion={renderSuggestion}\r\n            inputProps={inputProps}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from 'react';\nimport typeahead, { Bloodhound } from 'typeahead.js';\nimport useApi from './hooks/useApi';\nimport Album from './Album.js';\nimport Search from './Search.js';\n\nimport './styles/main.scss';\n\nconst api_url = 'https://musicbrainz.org/ws/2/';\n\nexport default function App() {\n  const [entity, setEntity] = useState({\n    type: 'album',\n    id: '2a0981fb-9593-3019-864b-ce934d97a16e'\n  });\n\n  const [resource, setResource] = useApi();\n  const [results, setQuery] = useApi();\n\n  const setAlbum = (id) => {\n    setEntity({ type: 'album', id: id });\n  };\n\n  const setArtist = (id) => {\n    setEntity({ type: 'artist', id: id });\n  };\n\n  useEffect(() => {\n    const params = new URLSearchParams();\n    params.append('fmt', 'json');\n\n    switch (entity.type) {\n      case 'album':\n        params.append('inc', 'artists+releases+genres');\n        setResource(api_url + `release-group/${entity.id}?` + params);\n        break;\n      case 'artist':\n        setResource(api_url + `artist/${entity.id}?` + params);\n        break;\n      default:\n        throw new Error();\n    }\n  }, [entity.id, entity.type, setResource]);\n\n  // let searchResults = new Bloodhound({\n  //   initialize: false,\n  //   local: ['dog', 'cat', 'hamster', 'cow'],\n  //   queryTokenizer: (datum) => Bloodhound.tokenizers.whitespace(datum.value),\n  //   dataTokenizer: (datum) => Bloodhound.tokenizers.whitespace(datum.value),\n  //   remote: {\n  //     url: `${api_url}release-group?query=`,\n  //     transform: (response) =>\n  //       response['release-groups'].map((album) => {\n  //         return { value: album.title, id: album.id };\n  //       })\n  //   }\n  // });\n\n  // searchResults.initialize();\n  // let input = document.getElementById('typeahead');\n  // input\n  //   .typeahead(\n  //     { hint: true, highlight: true, minLength: 2 },\n  //     { source: searchResults.ttAdapter() }\n  //   )\n  //   .on('typeahead:selected', (obj, datum) => {\n  //     const params = new URLSearchParams();\n  //     params.append('inc', 'artists+releases+genres');\n  //     setResource(api_url + `release-group/${entity.id}?` + params);\n  //   });\n\n  // useEffect(() => {\n  // const response = async () => {\n  //   await fetch(api_url);\n  //   let url = `${api_url}/${albumID}?&api_key=${api_key}`;\n  //   this.fetchApi(url);\n  // };\n  // //========================= BLOODHOUND ==============================//\n  // let suggests = new Bloodhound({\n  //   datumTokenizer: function(datum) {\n  //     return Bloodhound.tokenizers.whitespace(datum.value);\n  //   },\n  //   queryTokenizer: Bloodhound.tokenizers.whitespace,\n  //   remote: {\n  //     url:\n  //       'https://api.themoviedb.org/3/search/movie?query=%QUERY&api_key=cfe422613b250f702980a3bbf9e90716',\n  //     filter: function(albums) {\n  //       // Map the remote source JSON array to a JavaScript object array\n  //       return albums.results.map(function(album) {\n  //         return {\n  //           value: album.original_title, // search original title\n  //           id: album.id // get ID of movie simultaniously\n  //         };\n  //       });\n  //     } // end filter\n  //   } // end remote\n  // }); // end new Bloodhound\n  // suggests.initialize(); // initialise bloodhound suggestion engine\n  // //========================= END BLOODHOUND ==============================//\n  // //========================= TYPEAHEAD ==============================//\n  // // Instantiate the Typeahead UI\n  // $('.typeahead')\n  //   .typeahead(\n  //     {\n  //       hint: true,\n  //       highlight: true,\n  //       minLength: 2\n  //     },\n  //     { source: suggests.ttAdapter() }\n  //   )\n  //   .on(\n  //     'typeahead:selected',\n  //     function(obj, datum) {\n  //       this.fetchMovieID(datum.id);\n  //     }.bind(this)\n  //   ); // END Instantiate the Typeahead UI\n  // //========================= END TYPEAHEAD ==============================//\n  // }, [albumID]);\n\n  return (\n    <>\n      <Search />\n      {resource.isLoading ? (\n        <p style={{ color: 'blue' }}>Loading...</p>\n      ) : resource.isError ? (\n        <p style={{ color: 'red' }}>Errored!</p>\n      ) : (\n        <>\n          <Album album={resource.data} />\n        </>\n      )}\n    </>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('app'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}